#include "dmhuisma.dtsi" // The shared dtsi file is included in the overlay
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>

// layers, duplicate from the keymap (can these be pulled from there directly?)
#define DEFAULT         0
#define RAISE           1
#define FUNCTION        RAISE
#define MOUSE           2
#define MS              MOUSE
#define LOWER           3
#define LW              LOWER
#define MOUSE_SCROLL    LOWER
#define MSS             MOUSE_SCROLL
#define TRI_LAYER       4
#define GAMING          TRI_LAYER

&default_transform { // Offset of 6 because the left side has 6 columns
    col-offset = <6>;
};

/ {

    kscan0: kscan_composite {
        // matrix driver
        matrix {
            kscan = <&kscan1>;
        };
        // direct GPIO driver for EVQWGD001 button
        direct_right {
            kscan = <&kscan3>;
            row-offset = <7>;
        };
    };

    // key matrix
    kscan1: kscan1 {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;
        status = "okay";
        col-gpios
            = <&mcp_io 0 GPIO_ACTIVE_HIGH>
            , <&mcp_io 1 GPIO_ACTIVE_HIGH>
            , <&mcp_io 2 GPIO_ACTIVE_HIGH>
            , <&mcp_io 3 GPIO_ACTIVE_HIGH>
            , <&mcp_io 4 GPIO_ACTIVE_HIGH>
            , <&mcp_io 5 GPIO_ACTIVE_HIGH>
            ;

        // might need to be pull down?
        row-gpios
            = <&mcp_io 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>
            , <&mcp_io 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>
            , <&mcp_io 8 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>
            , <&mcp_io 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>
            , <&mcp_io 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>
            , <&mcp_io 11 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>
            ;
    };

    // EVQWGD001 button
    kscan3: kscan3 {
        compatible = "zmk,kscan-gpio-direct";
        wakeup-source;
        status = "okay";
        input-gpios
            = <&gpio0 9 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            ;
    };

    EVQWGD001_encoder: encoder_EVQWGD001 {
        status = "okay";
    };
};

&pinctrl {
    // trackball SPI
    spi2_default: spi2_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 17)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 6)>,
                    <NRF_PSEL(SPIM_MISO, 0, 8)>;
        };
    };
    spi2_sleep: spi2_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 17)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 6)>,
                    <NRF_PSEL(SPIM_MISO, 0, 8)>;
            low-power-enable;
        };
    };
};

&spi2 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi2_default>;
    pinctrl-1 = <&spi2_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio1 15 GPIO_ACTIVE_LOW>;

    trackball: trackball@0 {
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio1 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        cpi = <600>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;

        force-awake;
        /* keep the sensor awake while ZMK activity state is ACTIVE,
           fallback to normal downshift mode after ZMK goes into IDLE / SLEEP mode.
           thus, the sensor would be a `wakeup-source` */
    };
};

/ {
    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball>;
        input-processors = <&zip_xy_swap_mapper>;

        default {
            layers = <DEFAULT FUNCTION MOUSE GAMING>;
            process-next;
        };
        scroll {
            layers = <MOUSE_SCROLL>;
            input-processors = <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT)>, <&zip_xy_swap_mapper>, <&zip_xy_scaler 1 10>, <&zip_xy_to_scroll_mapper>;
            process-next;
        };
    };
};
