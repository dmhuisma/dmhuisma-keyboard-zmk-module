#include "dmhuisma.dtsi" // The shared dtsi file is included in the overlay
#include <zephyr/dt-bindings/input/input-event-codes.h>

&default_transform { // Offset of 6 because the left side has 6 columns
    col-offset = <6>;
};

/ {

    kscan0: kscan_composite {
        // matrix driver
        matrix {
            kscan = <&kscan1>;
        };
        // direct GPIO driver for EVQWGD001 button
        direct_right {
            kscan = <&kscan3>;
            row-offset = <7>;
        };
    };

    kscan1: kscan1 {
        status = "okay";
        row-gpios
            = <&mcp_io 0 (GPIO_ACTIVE_LOW)>
            , <&mcp_io 1 (GPIO_ACTIVE_LOW)>
            , <&mcp_io 2 (GPIO_ACTIVE_LOW)>
            , <&mcp_io 3 (GPIO_ACTIVE_LOW)>
            , <&mcp_io 4 (GPIO_ACTIVE_LOW)>
            , <&mcp_io 5 (GPIO_ACTIVE_LOW)>
            ;
        col-gpios
            = <&mcp_io 6  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&mcp_io 7  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&mcp_io 8  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&mcp_io 9  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&mcp_io 10 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&mcp_io 11 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            ;
    };

    // EVQWGD001 button
    kscan3: kscan3 {
        compatible = "zmk,kscan-gpio-direct";
        wakeup-source;
        status = "okay";
        input-gpios
            = <&gpio0 9 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            ;
    };

    EVQWGD001_encoder: encoder_EVQWGD001 {
        status = "okay";
        a-gpios = <&gpio1 11 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&gpio0 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
    };

    split_inputs {
        #address-cells = <1>;
        #size-cells = <0>;

        trackball_split: trackball_split@0 {
            compatible = "zmk,input-split";
            reg = <0>;
            device = <&trackball>;
        };
    };
};

&pinctrl {
    // I2C for MCP23017
    i2c0_default: i2c0_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 24)>,
                    <NRF_PSEL(TWIM_SCL, 0, 22)>;
        };
    };
    i2c0_sleep: i2c0_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 24)>,
                    <NRF_PSEL(TWIM_SCL, 0, 22)>;
            low-power-enable;
        };
    };

    // SPI for the nice view display
    spi1_default: spi1_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 11)>,
                    <NRF_PSEL(SPIM_MOSI, 1, 0)>;
        };
    };
    spi1_sleep: spi1_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 11)>,
                    <NRF_PSEL(SPIM_MOSI, 1, 0)>;
            low-power-enable;
        };
    };

    // trackball SPI
    spi2_default: spi2_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 17)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 8)>,
                    <NRF_PSEL(SPIM_MISO, 0, 8)>;
        };
    };
    spi2_sleep: spi2_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 17)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 8)>,
                    <NRF_PSEL(SPIM_MISO, 0, 8)>;
            low-power-enable;
        };
    };
};

&i2c0 {
    compatible = "nordic,nrf-twim";
    status = "okay";
    clock-frequency = <I2C_BITRATE_FAST>;
    wakeup-source;

    mcp_io: mcp23017@20 {
        compatible = "microchip,mcp230xx";
        status = "okay";
        gpio-controller;
        wakeup-source;
        reg = <0x20>;
        #gpio-cells = <2>;
        ngpios = <16>;
        int-gpios = <&gpio1 6 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
        reset-gpios = <&gpio0 20 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
    };
};

nice_view_spi: &spi1 {
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi1_default>;
    pinctrl-1 = <&spi1_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio1 4 GPIO_ACTIVE_HIGH>;
};

&spi2 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi2_default>;
    pinctrl-1 = <&spi2_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio1 15 GPIO_ACTIVE_LOW>;

    trackball: trackball@0 {
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio1 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        cpi = <800>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;

        force-awake;
        /* keep the sensor awake while ZMK activity state is ACTIVE,
           fallback to normal downshift mode after ZMK goes into IDLE / SLEEP mode.
           thus, the sensor would be a `wakeup-source` */

        force-high-performance;
    };
};
